class Solution:
    def findKthLargest(self, nums: List[int], k: int) -> int:

# This solution is of Time Complexiblity of n(log n), this can be improve with the algo QuickSelect  with Time Complexiblity of O(n)

        if not nums:
            return None
        nums.sort()
        return nums[len(nums)-k]  
       
        """
        # This is the Solution with QuickSort
        
        k = len(nums) - k

        def quickselect(l, r,k):
            pivot, p = nums[r], l
            
            for i in range(l, r):
                if nums[i] <= pivot:
                    nums[p], nums[i] = nums[i], nums[p]
                    p += 1
            
            nums[p], nums[r] = nums[r], nums[p]
            
            if p > k:
                return quickselect(l, p - 1,k)
            elif p < k:
                return quickselect(p + 1, r,k)
            else:
                return nums[p]
        
        return quickselect(0, len(nums) - 1,k)   
        """
             




        
