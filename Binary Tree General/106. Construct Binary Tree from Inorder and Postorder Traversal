# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def buildTree(self, inorder, postorder):
        """
        :type inorder: List[int]
        :type postorder: List[int]
        :rtype: TreeNode
        """
        # O(n^2)
        #There exist more optimized approaches, like using a hashmap to store indices of inorder elements for O(1) lookup, reducing the overall complexity to O(n) by avoiding repeated scans of the inorder list. 
        if not inorder:
            return None

        root=  TreeNode(postorder.pop())

        idx= inorder.index(root.val)
        root.right= self.buildTree(inorder[idx+1:],postorder)
        root.left= self.buildTree(inorder[:idx],postorder) 
        return root  
